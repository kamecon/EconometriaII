cons=2.1
for (i in 1:10) {
datos[1,i]=4.1
for (j in 2:100) datos[j,i]=cons+phi*y[j-1,i]+e[i]
}
View(datos)
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[i]
}
View(datos)
phi= -0.7048
z=rep(0,100)
e=rnorm(n=100,0,0.7)
cons=2.1
z[1]=4.1
for (i in 2:100) z[i]=cons+phi*z[i-1]+e[i]
plot(ts(z), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i)
}
View(datos)
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
View(datos)
phi= -0.7048
z=rep(0,100)
e=rnorm(n=100,0,0.7)
cons=2.1
z[1]=4.1
for (i in 2:100) z[i]=cons+phi*z[i-1]+e[i]
plot(ts(z), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i)
}
plot(ts(z), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i)
}
phi= -0.7048
z=rep(0,100)
e=rnorm(n=100,0,0.7)
cons=2.1
z[1]=4.1
for (i in 2:100) z[i]=cons+phi*z[i-1]+e[i]
plot(ts(z), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1)
}
for (i in 2:10) {
print(i)
lines(datos[,i] %>% ts(), col=i+1)
}
datos[,2]
datos[,3]
datos[,4]
View(datos)
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
e=rnorm(n=100,0,0.7)
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
phi= -0.7048
z=rep(0,100)
e=rnorm(n=100,0,0.7)
cons=2.1
z[1]=4.1
for (i in 2:100) z[i]=cons+phi*z[i-1]+e[i]
plot(ts(z), col=2)
for (i in 2:10) {
print(i)
lines(datos[,i] %>% ts(), col=i+1)
}
?plot
plot(datos[,1] %>% ts(), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1, sample(x = c("p","l","b"),1))
}
plot(datos[,1] %>% ts(), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1, sample(x = c("l","b"),1))
}
plot(datos[,1] %>% ts(), col=2)
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1, sample(x = c("l","c"),1))
}
plot(datos[,1] %>% ts(), col=2)
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=10)
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=3)
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1)
}
plot(datos[,1] %>% ts(), col=2, lwd=5, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1)
}
library(tidyverse)
# Proceso estocástico y serie temporal ------------------------------------
#Caso particular
phi= -0.7048
z=rep(0,100)
e=rnorm(n=100,0,0.7)
cons=2.1
z[1]=4.1
for (i in 2:100) z[i]=cons+phi*z[i-1]+e[i]
plot(ts(z), col=2)
phi= -0.7048
y=rep(0,100)
cons=2.1
y[1]=4.1
#--Creamos un data frame vacio que luego rellenamos con distintas realizaciones de series temporales
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
e=rnorm(n=100,0,0.7)
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
phi= -0.7048
y=rep(0,100)
cons=2.1
y[1]=4.1
#--Creamos un data frame vacio que luego rellenamos con distintas realizaciones de series temporales
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
e=rnorm(n=100,0,0.7)
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
View(datos)
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
plot(datos[,1] %>% ts(), col=2, lwd=5, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1)
}
sample(x = datos, size = 1)
sample(x = datos, size = 1)
sample(x = datos, size = 1) %>% head()
sample(x = datos, size = 1) %>% head()
sample(x = datos, size = 1) %>% head()
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## setup plot area
par(mfrow = c(1, 2))
## plot line
plot.ts(xx, ylab = expression(italic(x[t])))
## plot ACF
plot.acf(acf(xx, plot = FALSE))
## plot line
plot(xx %>% ts, ylab = expression(italic(x[t])))
## plot line
plot(xx %>% ts, ylab = expression(italic(x[t])))
## plot line
plot(xx %>% ts, ylab = expression(italic(x[t])))
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 500
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
w = rnorm(500,0,1)
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie")
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
w = rnorm(100,0,1)
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
v = filter(w, sides=2, rep(1/3,3))
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
v = filter(w, sides=2, rep(1/3,3))
v = stats::filter(w, sides=2, rep(1/3,3))
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
par(mfrow=c(2,1))
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
w = rnorm(500,0,1)
v = stats::filter(w, sides=2, rep(1/3,3))
par(mfrow=c(2,1))
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
par(mfrow=c(2,1))
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="l", col=2)
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="l", col=4)
library(fpp2)
install.packages("fpp2")
?fpp2
??fpp2
fpp2::dj
fpp2::qauselec
fpp2::qauselec %>% head()
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, warning=FALSE, message=FALSE)
library(fpp2)
autoplot(dj) + ylab("Dow Jones Index") + xlab("Day")
install.packages("atsa")
library("quantmod", lib.loc="~/R/win-library/4.1")
phi= -0.7048
y=rep(0,100)
cons=2.1
y[1]=4.1
#--Creamos un data frame vacio que luego rellenamos con distintas realizaciones de series temporales
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
e=rnorm(n=100,0,0.7)
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
#--Ejemplo con 3 realizaciones
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
library(tidyverse)
phi= -0.7048
y=rep(0,100)
cons=2.1
y[1]=4.1
#--Creamos un data frame vacio que luego rellenamos con distintas realizaciones de series temporales
datos <- matrix(0, nrow = 100, ncol = 10) %>% data.frame()
for (i in 1:10) {
datos[1,i]=4.1
e=rnorm(n=100,0,0.7)
for (j in 2:100) datos[j,i]=cons+phi*datos[j-1,i]+e[j]
}
#--Ejemplo con 3 realizaciones
plot(datos[,1] %>% ts(), col=2, lwd=3, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
lines(datos[,2] %>% ts(), col=3)
lines(datos[,3] %>% ts(), col=4)
#--Ejemplo con 10 realizaciones
plot(datos[,1] %>% ts(), col=2, lwd=5, main="Proceso Estocástico", xlab="Tiempo", ylab="Serie")
for (i in 2:10) {
lines(datos[,i] %>% ts(), col=i+1)
}
w = rnorm(500,0,1)
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie")
w = rnorm(100,0,1)
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
v = stats::filter(w, sides=2, rep(1/3,3))
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
par(mfrow=c(2,1))
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="b", col=2)
w = rnorm(500,0,1)
v = stats::filter(w, sides=2, rep(1/3,3))
w = rnorm(500,0,1)
v = stats::filter(w, sides=2, rep(1/3,3))
par(mfrow=c(2,1))
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="l", col=2)
plot(v %>% ts, main="Media Móvil", xlab="Tiempo", ylab="Serie", type="l", col=4)
phi= -0.9
z=rep(0,500)
z[1]=0
z[2]=2
for (i in 3:500) z[i]=z[i-1]+phi*z[i-2]+w[i]
plot(ts(z), col=2)
plot(ts(z), col=2)
plot(ts(z), col=2, main="Proceso autoregresivo", xlab="tiempo", ylab="Serie")
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
plot(ts(z), col=2, main="Proceso autoregresivo" expression(italic(x[t]=x[t-1]+0.9x[t-2])), xlab="tiempo", ylab="Serie")
plot(ts(z), col=2, main= expression(italic(x[t]=x[t-1]+0.9x[t-2])), xlab="tiempo", ylab="Serie")
plot(ts(z), col=2, main="Proceso autoregresivo", xlab="tiempo", ylab="Serie")
## plot line
plot(xx %>% ts, type="b" ,ylab = expression(italic(x[t])))
## plot line
plot(xx %>% ts, type="l" ,ylab = expression(italic(x[t])))
delta=0.2
for (t in 2:TT) {
xx[t] <- delta + xx[t - 1] + ww[t]
}
TT <- 200
## initialize {x_t} and {w_t}
zz <- xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## with trend
delta=0.2
for (t in 2:TT) {
zz[t] <- delta + zz[t - 1] + ww[t]
}
plot(xx %>% ts, type="l" ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
plot(xx %>% ts, type="l", ylim=c(-20,20) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
plot(xx %>% ts, type="l", ylim=c(-20,40) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
lines(x)
lines(delta*(1:200), type = "d")
lines(delta*(1:200), type = "dashed")
lines(delta*(1:200), lty = "dashed")
plot(xx %>% ts, type="l", ylim=c(-20,40) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
lines(delta*(0:200), lty = "dashed")
TT <- 500
## initialize {x_t} and {w_t}
zz <- xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
## with trend
delta=0.2
for (t in 2:TT) {
zz[t] <- delta + zz[t - 1] + ww[t]
}
## plot line
plot(xx %>% ts, type="l", ylim=c(-20,40) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
lines(delta*(0:200), lty = "dashed")
plot(xx %>% ts, type="l", ylim=c(-20,80) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
lines(delta*(0:200), lty = "dashed")
plot(xx %>% ts, type="l", ylim=c(-20,100) ,ylab = expression(italic(x[t])))
lines(zz %>% ts)
lines(delta*(0:500), lty = "dashed")
plot(xx %>% ts, type="l", ylim=c(-20,100) ,ylab = "Series", xlab="Tiempo", main="Paseo Aleatorio")
lines(zz %>% ts)
lines(delta*(0:500), lty = "dashed", col=2)
plot(w + delta %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
ww = w + delta
plot(ww %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
plot(ww %>% ts, main="Ruido Blanco con deriva", xlab="Tiempo", ylab="Serie", type="b", col=2)
plot(w %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
delta = 2
ww = w + delta
plot(ww %>% ts, main="Ruido Blanco con deriva", xlab="Tiempo", ylab="Serie", type="b", col=2)
install.packages("xaringan")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
if (! ('pacman' %in% installed.packages())) install.packages('pacman')
pacman::p_load(tidyverse, kableExtra, quantmod, fredr, patchwork, fpp2)
library(quantmod)
#Obtenemos los tipos de cambio
getSymbols(c('EURUSD=X','EURGBP=X','EURJPY=X'))
euro_dolar <- `EURUSD=X`
euro_libra <- `EURGBP=X`
euro_yen <- `EURJPY=X`
#Graficamos los tipos de cambio
plot(index(euro_dolar),as.numeric(euro_dolar[,6]),typ='l',xlab='',ylab='EUR/USD', main = "Tipo de Cambio Euro/Dólar")
euro_dolar$adjusteddiff <- diff(euro_dolar$`EURUSD=X.Adjusted` )
euro_libra$adjusteddiff <- diff(euro_libra$`EURGBP=X.Adjusted` )
euro_yen$adjusteddiff <- diff(euro_yen$`EURJPY=X.Adjusted`)
#Graficamos las variaciones
plot(index(euro_dolar),as.numeric(euro_dolar[,7]),typ='l',xlab='',ylab='EUR/USD', main = "Variación del Tipo de Cambio Euro/Dólar")
par(mfrow=c(2,1))
plot(index(euro_dolar),as.numeric(euro_dolar[,6]),typ='l',xlab='',ylab='EUR/USD', main = "Tipo de Cambio Euro/Dólar")
plot(index(euro_dolar),as.numeric(euro_dolar[,7]),typ='l',xlab='',ylab='EUR/USD', main = "Variación del Tipo de Cambio Euro/Dólar")
dev.off()
par(mfrow=c(2,1))
plot(index(euro_dolar),as.numeric(euro_dolar[,6]),typ='l',xlab='',ylab='EUR/USD', main = "Tipo de Cambio Euro/Dólar")
plot(index(euro_dolar),as.numeric(euro_dolar[,7]),typ='l',xlab='',ylab='EUR/USD', main = "Variación del Tipo de Cambio Euro/Dólar")
dev.off()
save(euro_dolar, file = "data/euro_dolar.RData")
save(euro_libra, file = "data/euro_libra.RData")
save(euro_yen, file = "data/euro_yen.RData")
getwd()
setwd("H:/ceu/EconometriaII/EconometriaII/")
save(euro_dolar, file = "data/euro_dolar.RData")
save(euro_libra, file = "data/euro_libra.RData")
save(euro_yen, file = "data/euro_yen.RData")
save(euro_dolar, file = "data/euro_dolar.RData")
save(euro_libra, file = "data/euro_libra.RData")
save(euro_yen, file = "data/euro_yen.RData")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
beeracf <- matrix(acf(c(beer), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
if (! ('pacman' %in% installed.packages())) install.packages('pacman')
pacman::p_load(tidyverse, kableExtra, quantmod, fredr, patchwork, fpp2)
beeracf <- matrix(acf(c(beer), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(beeracf) <- paste("$r_",1:9,"$",sep="")
knitr::kable(beeracf, booktabs=TRUE,
align="c", digits=3,
format.args=list(nsmall=3))
w1 = rnorm(100,0,1)
plot(w1 %>% ts, main="Ruido Blanco", xlab="Tiempo", ylab="Serie", type="b", col=2)
wracf <- matrix(acf(c(w1), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(w1) <- paste("$r_",1:9,"$",sep="")
wracf <- matrix(acf(c(w1), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(wracf) <- paste("$r_",1:9,"$",sep="")
knitr::kable(wacf, booktabs=TRUE,
align="c", digits=3,
format.args=list(nsmall=3))
wracf <- matrix(acf(c(w1), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(wracf) <- paste("$r_",1:9,"$",sep="")
knitr::kable(wracf, booktabs=TRUE,
align="c", digits=3,
format.args=list(nsmall=3))
paste("r_",1:9,sep="")
paste(r_,1:9,sep="")
paste0("r_",1:9)
paste("r~",1:9,"~",sep="")
ggAcf(beer)
ggAcf(beer)
ggAcf(beer)
ggAcf(beer) + labs(title = "")
ggAcf(beer) + labs(title = "")
ggAcf(beer) + labs(title = "Producción de cerveza en Australia")
autoplot(goog)  + labs(title = "Producción de cerveza en Australia")
autoplot(goog)  + labs(title = "Precio de la acción de Google")
beeracf <- matrix(acf(c(beer), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(beeracf) <- paste("r~",1:9,"~",sep="")
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3,
format.args=list(nsmall=3))
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3,
format.args=list(nsmall=3))
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3,
format.args=list(nsmall=3)) %>% kable_styling()
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3, col.names =  paste("r~",1:9,"~",sep=""),
format.args=list(nsmall=3)) %>% kable_styling()
beeracf <- matrix(acf(c(beer), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(beeracf) <- paste("r~",1:9,"~",sep="")
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3,
format.args=list(nsmall=3))
beeracf <- matrix(acf(c(beer), lag.max=9,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(beeracf) <- paste("r<sub>",1:9,"</sub>",sep="")
knitr::kable(beeracf, booktabs=TRUE, format = "html",
align="c", digits=3,
format.args=list(nsmall=3))
paste("r",1:9,sep="")
